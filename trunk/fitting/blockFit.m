function [fitresult, gof] = blockFit( set, base )
% DODGESURFACEFIT(SET, BASE)
%  Input:
%      set : a data set structure generated by parseChatLog
%      base : structure containing base stat information
%
%  Output:
%      fitresult : an sfit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, SFIT.

%  Auto-generated by MATLAB on 13-Sep-2012 15:15:46

%% unpack data set
preMastery=set.preMastery;
postBlock=set.postBlock;
m2b=base.mast2block;
baseBlock=base.block;
bf = base.bf;
hs = base.hs;
vs = base.vs;

bonusBlock = preMastery.*m2b;

%% Fit: 'untitled fit 1'.
xInput = round(128*bonusBlock)/128;
zOutput = postBlock;

%fit function 13+1/(1/C+k/round(128*x)*128)
fitType = [ int2str(baseBlock) '+R+x/(x*' num2str(bf) '*vs+hs)'];

%bounds on HS/VS
deltaQ=10;
deltaHS=0.000001;
deltaVS=0.0000001;

% Set up fittype and options.
ft = fittype( fitType , 'indep', 'x', 'depend', 'z' );
opts = fitoptions( ft );
opts.DiffMinChange = 1e-012;
opts.Display = 'Off';
opts.Lower = [ -deltaQ hs-deltaHS vs-deltaVS];
opts.MaxFunEvals = 60000;
opts.MaxIter = 40000;
opts.Robust = 'Bisquare';
opts.StartPoint = [ 0 hs vs];
opts.TolFun = 1e-012;
opts.TolX = 1e-012;
opts.Upper = [ deltaQ hs+deltaHS vs+deltaVS];

% Fit model to data.
[fitresult, gof] = fit( xInput, zOutput, ft, opts );
residuals = fitresult(xInput)-zOutput;

% Create a figure for the plots.
figure( 5 );

% Plot fit with data.
h = plot( fitresult, xInput, zOutput );
legend( h, 'fit', 'postBlock vs. preBlock', 'Location', 'Best' );
% Label axes
xlabel( 'bonusBlock' );
ylabel( 'postBlock' );
grid on

% Plot residuals.
figure(6)
h = plot( xInput, zeros(size(xInput)),'k-', xInput, residuals, 'o-');
legend( 'fit residuals', 'Location', 'Best' );
% Label axes
xlabel( 'bonusBlock' );
ylabel( 'postBlock' );
grid on


disp('==== Block Curve Fit=====')


if sum(bonusBlock==0)==length(bonusBlock)
    warning('---------------No bonusBlock to fit-------------------')
end

% fitresult
% %% 
% [fitresult(xInput) zOutput fitresult(xInput)-zOutput]
%  num2str(coeffvalues(fitresult)','%1.10f')
end
